#!/usr/bin/env python3
import gzip
import argparse
import argcomplete
import os
from Bio.SeqIO.FastaIO import SimpleFastaParser
from librs.return_time import return_time


def input_options():
    parser = argparse.ArgumentParser(description="create the GBentry file", prefix_chars="-")
    parser.add_argument("-i", "--its_file", type=str,
                        help="tsv containg ITS1 location per accession (file generated by 1_correct_final_table_taxid.py)",
                        action="store", required=True)
    parser.add_argument("-t", "--tsv_list_file", type=str,
                        help="file containing the list of tsv file per accession",
                        action="store", required=True)
    parser.add_argument("-f", "--fasta_list_file", type=str,
                        help="file containing the list of fasta file per accession",
                        action="store", required=True)
    parser.add_argument("-o", "--output_folder", type=str, help="output folder", action="store", required=False,
                        default="etl")
    argcomplete.autocomplete(parser)
    return parser.parse_args()


# noinspection PyPep8Naming
def dataITS1(its1_tsv):
    """
    This Funcition parse the tsv file genrated by the 1_correct_final_table_taxid.py script.
    :param its1_tsv: str
    :return acc2data: dict
    """
    acc2data = {}
    with open(its1_tsv) as a:
        a.readline()
        for line in a:
            s = list(map(str.strip, line.split("\t")))
            acc2data[s[0]] = s[1:]
    return acc2data


def input_file_diz_generator(tsv_list, fasta_list):
    """
    This function creates 2 dictionaries by associatign ENA accession number to the relative fasta and tsv files.
    :param tsv_list: str
    :param fasta_list: str
    :return acc2tsv: dict
    :return acc2fasta: dict
    """
    acc2tsv = {}
    acc2fasta = {}
    with gzip.open(tsv_list, 'rt') as a:
        a.readline()
        for line in a:
            acc, path = list(map(str.strip, line.split("\t")))
            acc2tsv[acc] = path
    with gzip.open(fasta_list, 'rt') as a:
        a.readline()
        for line in a:
            acc, path = list(map(str.strip, line.split("\t")))
            acc2fasta[acc] = path
    return acc2tsv, acc2fasta


def gbentry_generation(data_diz, tsv_diz):
    """
    It generates the data for the gbentry file filling.
    :param data_diz: dict
    :param tsv_diz: dict
    :return data_for_file: dict
    """
    data_for_file = {}
    for acc in data_diz:
        # print(acc)
        # print(len(data_for_file))
        with gzip.open(os.path.join(out.split('/etl')[0], tsv_diz[acc]), 'rt') as tsv_f:
            data = tsv_f.readlines()
            # print data
            i = 0
            while i < len(data):
                # print data[i].strip()
                if data[i].strip() == "NEW ACC":
                    strain = "NULL"
                    host = "NULL"
                    lista_i = [acc, data_diz[acc][0], data[i + 4].strip(), data[i + 6].strip()]
                    i += 7
                    # print acc,data[i]
                    while data[i].strip() != "--------------------------------------------------------":
                        s = list(map(str.strip, data[i].split("\t")))
                        key = s[0].split(":location:")[0]
                        if key == "source":
                            p = list(map(str.strip, s[1].split("###")))
                            # print p
                            for qual_value in p:
                                c = qual_value.split("=")
                                if c[0] == "/strain":
                                    strain = c[1].strip("\"")
                                elif c[0] == "/host":
                                    host = c[1].strip("\"")
                            i += 1
                        else:
                            i += 1
                    else:
                        lista_i.append(host)
                        lista_i.append(strain)
                        lista_i.append(data_diz[acc][1])
                        data_for_file[acc] = lista_i
                        i += 1
                else:
                    i += 1
    return data_for_file


if __name__ == "__main__":
    return_time("Start gbentry.tsv.gz file preparation")
    param = input_options()
    its1, tsv_data, fasta_data, out = param.its_file, param.tsv_list_file, param.fasta_list_file, param.output_folder
    acc_num2info = dataITS1(its1)
    tsv, fasta = input_file_diz_generator(tsv_data, fasta_data)
    tmp = gzip.open(os.path.join(out, "gbentry.tsv.gz"), "wt")
    tmp.write("Accession\tAccessionVersion\tDescription\tLength\thost\tstrain\tTaxon\torigin\n")
    for lista in gbentry_generation(acc_num2info, tsv).values():
        # print(lista[0])
        with gzip.open(os.path.join(out.split('/etl')[0],fasta[lista[0]]),'rt') as fasta_file:
            for title, seq in SimpleFastaParser(fasta_file):
                lista.append(seq.replace("\n", ""))
        tmp.write("%s\n" % "\t".join(lista))
    tmp.close()
    return_time("%s file stored." % os.path.join(out, "gbentry.tsv.gz"))
